#!/bin/bash

set -o errexit

ORIGINAL_SSH=$(which ssh)
DATA_PATH="$HOME/.sshm"
DATA_FILE="$DATA_PATH/.data"
DATA_CACHE_FILE="$DATA_PATH/.data.cache"

function help()
{
  echo "
Usage:
  sshm options

Options:
  -h|--help                     Display help message
  -l|--list                     List all ssh bookmarks
  -c|--connect host             Connect to a host, where host is the index number of
                                hosts shown by 'sshm -l'
  "
  exit
}

function parse_options()
{
  while :; do
    case $1 in
      -h|-\?|--help)
        command='help'
        break
        ;;
      -l|--list)
        command='list'
        break
        ;;
      -c|--connect)
        command='connect'
        if [[ -n $2 ]]; then
          host=$2
          break
        else
          help
        fi
        ;;
      *)
        break
    esac
  done
}

function list()
{
  if [[ ! -d "$DATA_PATH" ]]; then
    echo "$DATA_PATH doesn't exist."
    mkdir -p $DATA_PATH
  fi

  if [[ ! -e $DATA_FILE ]]; then
    echo "$DATA_FILE doesn't exist"
    touch $DATA_FILE
  fi

  awk '{printf "[%s] => ", FNR} {for(i=3; i<=NF; i++) printf "%s ", $i} {print ""}' $DATA_FILE

  # Update the cache file
  cp $DATA_FILE $DATA_CACHE_FILE
}

function connect()
{
  if [[ -z $host ]]; then
    echo "You didn't specific which host to connect"
    help
  fi

  if [[ ! "$host" -gt 0 ]]; then
    echo "The host index must be a positive number"
    help
  fi

  if [[ ! -e $DATA_FILE ]]; then
    echo "The data file $DATA_FILE doesn't exist, maybe you should run sshm -l first."
    exit 1
  fi

  if [[ -e $DATA_CACHE_FILE ]]; then
    temp=$DATA_CACHE_FILE
  else
    temp=$DATA_FILE
  fi

  # Use a cache file to find the wanted server.save the latest result of sshm -l, so user won't miss the host
  # index argument caused by the update of DATA_FILE.
  server=$(sed -n "$host p" $temp | awk '{for(i=3; i<=NF; i++) printf "%s ", $i} {print ""}')
  if [[ -z $server ]]; then
    echo "The host you specific doesn't exist."
    exit 1
  fi

  ssh $server
}

function ssh() {
  echo "ssh to $server"
  $ORIGINAL_SSH "$@" && sshm-update "$*"
}

parse_options "$@"

if [[ -z $command ]]; then
  help
fi

$command
